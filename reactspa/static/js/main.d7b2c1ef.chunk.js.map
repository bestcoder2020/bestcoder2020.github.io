{"version":3,"sources":["logo.jpg","pages/Home.js","components/Apiblock.js","pages/Products.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Container","className","Card","style","width","Img","variant","src","logo","Body","Title","Text","Button","Apiblock","props","state","isLoaded","error","products","handleClick","bind","fetch","this","apiUrl","then","res","json","setState","results","console","log","message","map","product","i","key","name","React","Component","Products","useState","isLoad","setLoad","showText","onClick","App","Navbar","bg","expand","to","Toggle","aria-controls","Collapse","id","Nav","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,2OCqB5BC,MAjBf,WACI,OACI,kBAACC,EAAA,EAAD,CAAWC,UAAU,sCACjB,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKC,MAC7B,kBAACN,EAAA,EAAKO,KAAN,KACI,kBAACP,EAAA,EAAKQ,MAAN,kBACA,kBAACR,EAAA,EAAKS,KAAN,gDAGA,kBAACC,EAAA,EAAD,CAAQN,QAAQ,WAAhB,mB,gDCuCLO,E,kDAjDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAU,EACVC,MAAO,KACPC,SAAU,IAEd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPJ,E,gEAUE,IAAD,OAChBC,MAAMC,KAAKR,MAAMS,QACZC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACC,GACG,EAAKE,SAAS,CACVX,SAAU,EACVE,SAAUO,EAAIG,aAGtB,SAACX,GACG,EAAKU,SAAS,CACVX,SAAU,EACVC,e,oCAOhBK,KAAKK,UAAS,SAACZ,EAAOD,GAClBe,QAAQC,IAAIf,Q,+BAIV,IAAD,EACiCO,KAAKP,MAAnCC,EADH,EACGA,SAAUC,EADb,EACaA,MAAOC,EADpB,EACoBA,SACzB,OAAKF,EAEMC,EACA,iCAAOA,EAAMc,QAAb,KAEA,4BACFb,EAASc,KAAI,SAACC,EAASC,GAAV,OAAgB,wBAAIC,IAAKD,EAAGjC,UAAU,IAAIgC,EAAQG,UAL7D,+C,GAxCIC,IAAMC,WCcdC,MAZf,WAAqB,IAAD,EACWC,oBAAS,GADpB,mBACTC,EADS,KACDC,EADC,KAEVC,EAAWF,EAAS,WAAa,WAEvC,OACI,kBAACzC,EAAA,EAAD,CAAWC,UAAU,QACjB,kBAACW,EAAA,EAAD,CAAQgC,QAAS,kBAAMF,GAASD,KAAUE,GACzCF,GAAU,kBAAC,EAAD,CAAUlB,OAAO,sE,MCMzB,SAASsB,IACpB,OACI,kBAAC,IAAD,KACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtB,kBAAC,IAAD,CAAM/C,UAAU,eAAegD,GAAG,KAAlC,aACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKrD,UAAU,WACX,kBAAC,IAAD,CAAMA,UAAU,WAAWgD,GAAG,KAA9B,QACA,kBAAC,IAAD,CAAMhD,UAAU,WAAWgD,GAAG,aAA9B,eAIZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOM,KAAK,aACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,UCxBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAE,EAAF,MAAYC,SAASC,eAAe,SD6H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLY,QAAQZ,MAAMA,EAAMc,c","file":"static/js/main.d7b2c1ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8050cde2.jpg\";","import React from 'react';\r\nimport logo from '../logo.jpg';\r\nimport {Container, Card, Button } from 'react-bootstrap';\r\n\r\nfunction Home() {\r\n    return (\r\n        <Container className=\"mt-2 d-flex justify-content-center\">\r\n            <Card style={{ width: '18rem' }}>\r\n                <Card.Img variant=\"top\" src={logo} />\r\n                <Card.Body>\r\n                    <Card.Title>React SPA</Card.Title>\r\n                    <Card.Text>\r\n                        I can build perfect React SPA front-end\r\n                    </Card.Text>\r\n                    <Button variant=\"primary\">Really Good</Button>\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nclass Apiblock extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoaded: 0,\r\n            error: null,\r\n            products: []\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(this.props.apiUrl)\r\n            .then(res => res.json())\r\n            .then(\r\n                (res) => {\r\n                    this.setState({\r\n                        isLoaded: 1,\r\n                        products: res.results\r\n                    })\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: 1,\r\n                        error\r\n                    })\r\n                }\r\n            )\r\n    }\r\n\r\n    handleClick() {\r\n        this.setState((state, props) => {\r\n            console.log(state);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { isLoaded, error, products } = this.state;\r\n        if (!isLoaded) {\r\n            return <div>Loading...</div>\r\n        } else if (error) {\r\n            return <div> {error.message} </div>\r\n        } else {\r\n            return <ul>\r\n                {products.map((product, i) => <li key={i} className=\"\">{product.name}</li>)}\r\n            </ul>\r\n        }\r\n    }\r\n}\r\n\r\nexport default Apiblock;","import React, {useState} from 'react';\r\nimport {Button, Container} from 'react-bootstrap'\r\nimport Apiblock from '../components/Apiblock';\r\n\r\nfunction Products() {\r\n    const [isLoad, setLoad] =  useState(false);\r\n    const showText = isLoad ? \"Hide API\" : \"Load API\";\r\n    \r\n    return (\r\n        <Container className=\"mt-2\">\r\n            <Button onClick={() => setLoad(!isLoad)}>{showText}</Button>\r\n            {isLoad && <Apiblock apiUrl=\"https://miraclecbdproducts.com/api/product/?username=klinganton\" />}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Products;\r\n","//import core modules\nimport React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\n//import page level modules\nimport {Navbar, Nav} from 'react-bootstrap';\nimport Home from './pages/Home';\nimport Products from './pages/Products';\n\n//import sass\nimport './App.scss';\n\nexport default function App() {\n    return (\n        <Router>\n            <div>\n                <Navbar bg=\"light\" expand=\"lg\">\n                    <Link className=\"navbar-brand\" to=\"/\">React-SPA</Link>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <Link className=\"nav-link\" to=\"/\">Home</Link>\n                            <Link className=\"nav-link\" to=\"/products\">Products</Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n                <Switch>\n                    <Route path=\"/products\">\n                        <Products />\n                    </Route>\n                    <Route path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}